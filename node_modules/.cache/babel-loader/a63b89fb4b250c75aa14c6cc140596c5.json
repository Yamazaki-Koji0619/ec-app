{"ast":null,"code":"import { db, FirebaseTimestamp } from \"../../firebase\";\nimport { push } from \"connected-react-router\";\nimport { deleteProductAction, fetchProductsAction, fetchKeywordAction, fetchSearchProductsAction } from './actions';\nconst productsRef = db.collection('products');\nexport const deleteProduct = id => {\n  return async (dispatch, getState) => {\n    productsRef.doc(id).delete().then(() => {\n      const prevProducts = getState().products.list;\n      const nextProducts = prevProducts.filter(product => product.id !== id);\n      dispatch(deleteProductAction(nextProducts));\n    });\n  };\n};\nexport const fetchKeyword = keyword => {\n  return async dispatch => {\n    dispatch(fetchKeywordAction(keyword));\n  };\n};\nexport const fetchProducts = (gender, category) => {\n  return async dispatch => {\n    let query = productsRef.orderBy('updated_at', 'desc');\n    query = gender !== \"\" ? query.where('gender', '==', gender) : query;\n    query = category !== \"\" ? query.where('category', '==', category) : query;\n    console.log(query);\n    query.get().then(snapshots => {\n      const productList = [];\n      snapshots.forEach(snapshot => {\n        const product = snapshot.data();\n        productList.push(product);\n      });\n      dispatch(fetchProductsAction(productList));\n    });\n  };\n}; // export const fetchSearchProducts = () => {\n//     return async(dispatch) => {\n//         let query = productsRef.orderBy('updated_at','desc');\n//         query.get()\n//             .then(snapshots => {\n//                 const productList = []\n//                 snapshots.forEach(snapshot => {\n//                     const product = snapshot.data();\n//                     productList.push(product)\n//                 })\n//                 dispatch(fetchSearchProductsAction(productList))\n//             })\n//     }\n// }\n\nexport const orderProduct = (productInCart, amount) => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n    const userRef = db.collection('users').doc(uid);\n    const timestamp = FirebaseTimestamp.now();\n    let products = [],\n        soldOutProducts = [];\n    const batch = db.batch();\n\n    for (const product of productInCart) {\n      const snapshot = await productsRef.doc(product.productId).get();\n      const sizes = snapshot.data().sizes;\n      const updatedSizes = sizes.map(size => {\n        if (size.size === product.size) {\n          if (size.quantity === 0) {\n            soldOutProducts.push(product.name);\n            return size;\n          }\n\n          return {\n            size: size.size,\n            quantity: size.quantity - 1\n          };\n        } else {\n          return size;\n        }\n      });\n      products.push({\n        id: product.productId,\n        images: product.images,\n        name: product.name,\n        price: product.price,\n        size: product.size\n      });\n      batch.update(productsRef.doc(product.productId), {\n        sizes: updatedSizes\n      });\n      batch.delete(userRef.collection('cart').doc(product.cartId));\n    }\n\n    if (soldOutProducts.length > 0) {\n      const errorMessage = soldOutProducts.length > 1 ? soldOutProducts.join('と') : soldOutProducts[0];\n      alert('大変申し訳ありません。' + errorMessage + 'が在庫切れとなったため、注文処理を中断しました。');\n      return false;\n    } else {\n      batch.commit().then(() => {\n        const orderRef = userRef.collection('orders').doc();\n        const date = timestamp.toDate();\n        const shippingDate = FirebaseTimestamp.fromDate(new Date(date.setDate(date.getDate() + 3)));\n        const history = {\n          amount: amount,\n          created_at: timestamp,\n          id: orderRef.id,\n          products: products,\n          shipping_date: shippingDate,\n          updated_at: timestamp\n        };\n        orderRef.set(history);\n        dispatch(push('/order/complete'));\n      }).catch(() => {\n        alert('注文処理に失敗しました。通信環境をご確認のうえ、もう一度お試しください。');\n        return false;\n      });\n    }\n  };\n};\nexport const saveProduct = (id, name, discription, category, gender, price, images, sizes) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      category: category,\n      discription: discription,\n      gender: gender,\n      images: images,\n      name: name,\n      price: parseInt(price, 10),\n      sizes: sizes,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = productsRef.doc();\n      id = ref.id;\n      data.id = id;\n      data.created_at = timestamp;\n    }\n\n    return productsRef.doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/products/operations.js"],"names":["db","FirebaseTimestamp","push","deleteProductAction","fetchProductsAction","fetchKeywordAction","fetchSearchProductsAction","productsRef","collection","deleteProduct","id","dispatch","getState","doc","delete","then","prevProducts","products","list","nextProducts","filter","product","fetchKeyword","keyword","fetchProducts","gender","category","query","orderBy","where","console","log","get","snapshots","productList","forEach","snapshot","data","orderProduct","productInCart","amount","uid","users","userRef","timestamp","now","soldOutProducts","batch","productId","sizes","updatedSizes","map","size","quantity","name","images","price","update","cartId","length","errorMessage","join","alert","commit","orderRef","date","toDate","shippingDate","fromDate","Date","setDate","getDate","history","created_at","shipping_date","updated_at","set","catch","saveProduct","discription","parseInt","ref","merge","error","Error"],"mappings":"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","sourcesContent":["import { db, FirebaseTimestamp } from \"../../firebase\";\nimport { push } from \"connected-react-router\";\nimport { deleteProductAction, fetchProductsAction, fetchKeywordAction, fetchSearchProductsAction } from './actions';\n\nconst productsRef = db.collection('products');\n\nexport const deleteProduct = (id) => {\n    return async(dispatch, getState) => {\n        productsRef.doc(id).delete()\n            .then(() => {\n                const prevProducts = getState().products.list;\n                const nextProducts = prevProducts.filter(product => product.id !== id)\n                dispatch(deleteProductAction(nextProducts))\n            })\n    }\n}\n\nexport const fetchKeyword = (keyword) => {\n    return async(dispatch) => {\n        dispatch(fetchKeywordAction(keyword))\n    }\n}\n\nexport const fetchProducts = (gender, category) => {\n    return async(dispatch) => {\n        let query = productsRef.orderBy('updated_at','desc');\n        query = (gender !== \"\") ? query.where('gender', '==', gender) : query;\n        query = (category !== \"\") ? query.where('category', '==', category) : query;\n        console.log(query);\n\n        query.get()\n            .then(snapshots => {\n                const productList = []\n                snapshots.forEach(snapshot => {\n                    const product = snapshot.data();\n                    productList.push(product)\n                })\n                dispatch(fetchProductsAction(productList))\n            })\n    }\n}\n\n// export const fetchSearchProducts = () => {\n//     return async(dispatch) => {\n//         let query = productsRef.orderBy('updated_at','desc');\n\n//         query.get()\n//             .then(snapshots => {\n//                 const productList = []\n//                 snapshots.forEach(snapshot => {\n//                     const product = snapshot.data();\n//                     productList.push(product)\n//                 })\n//                 dispatch(fetchSearchProductsAction(productList))\n//             })\n//     }\n// }\n\nexport const orderProduct = (productInCart, amount) => {\n    return async(dispatch, getState) => {\n        const uid = getState().users.uid;\n        const userRef = db.collection('users').doc(uid);\n        const timestamp = FirebaseTimestamp.now();\n\n        let products = [],\n            soldOutProducts = [];\n\n        const batch = db.batch()\n\n        for(const product of productInCart){\n            const snapshot = await productsRef.doc(product.productId).get()\n            const sizes = snapshot.data().sizes\n\n            const updatedSizes = sizes.map(size => {\n                if(size.size === product.size){\n                    if(size.quantity === 0){\n                        soldOutProducts.push(product.name)\n                        return size\n                    }\n                    return{\n                        size: size.size,\n                        quantity: size.quantity - 1\n                    }\n                } else{\n                    return size\n                }\n            })\n\n            products.push({\n                id: product.productId,\n                images: product.images,\n                name: product.name,\n                price: product.price,\n                size: product.size\n            })\n\n            batch.update(\n                productsRef.doc(product.productId),\n                {sizes: updatedSizes}\n            )\n\n            batch.delete(\n                userRef.collection('cart').doc(product.cartId)\n            )\n        }\n\n        if(soldOutProducts.length > 0){\n            const errorMessage = (soldOutProducts.length > 1) ? soldOutProducts.join('と') : soldOutProducts[0]\n            alert('大変申し訳ありません。'　+ errorMessage + 'が在庫切れとなったため、注文処理を中断しました。')\n            return false\n        }else{\n            batch.commit().then(() => {\n                const orderRef = userRef.collection('orders').doc();\n                const date = timestamp.toDate();\n                const shippingDate = FirebaseTimestamp.fromDate(new Date(date.setDate(date.getDate() + 3)));\n\n                const history = {\n                    amount: amount,\n                    created_at: timestamp,\n                    id: orderRef.id,\n                    products: products,\n                    shipping_date: shippingDate,\n                    updated_at: timestamp\n                }\n                orderRef.set(history)\n                dispatch(push('/order/complete'))\n\n            }).catch(() => {\n                alert('注文処理に失敗しました。通信環境をご確認のうえ、もう一度お試しください。')\n                return false\n            })\n        }\n    }\n}\n\nexport const saveProduct = (id, name, discription, category, gender, price, images, sizes) => {\n    return async(dispatch) => {\n        const timestamp = FirebaseTimestamp.now()\n\n        const data = {\n            category: category,\n            discription: discription,\n            gender: gender,\n            images: images,\n            name: name,\n            price: parseInt(price, 10),\n            sizes: sizes,\n            updated_at: timestamp\n        }\n\n        if(id === \"\"){\n            const ref = productsRef.doc()\n            id = ref.id\n            data.id = id\n            data.created_at = timestamp\n        }\n\n        return productsRef.doc(id).set(data, {merge: true})\n            .then(() => {\n                dispatch(push('/'))\n            }).catch((error) => {\n                throw new Error(error)\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}