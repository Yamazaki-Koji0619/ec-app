{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nexport const signIn = () => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const isSignedIn = state.users.isSignedIn;\n\n    if (!isSignedIn) {\n      const url = 'https://api.github.com/users/Yamazaki-Koji0619';\n      const response = await fetch(url).then(res => res.json()).catch(() => null);\n      const username = response.login;\n      dispatch(signInAction({\n        isSignedIn: true,\n        uid: \"0001\",\n        username: username\n      }));\n      dispatch(push('/'));\n    }\n  };\n};\nexport const SignUp = (username, email, password, confirmpassword) => {\n  return async dispatch => {\n    if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmpassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          create_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection('users').doc(uid).set(userInitialData).then(() => {\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","signIn","dispatch","getState","state","isSignedIn","users","url","response","fetch","then","res","json","catch","username","login","uid","SignUp","email","password","confirmpassword","alert","createUserWithEmailAndPassword","result","user","timestamp","now","userInitialData","create_at","role","updated_at","collection","doc","set"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,EAAlC,QAA4C,sBAA5C;AAGA,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxB,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAChC,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAME,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYD,UAA/B;;AAEA,QAAG,CAACA,UAAJ,EAAe;AACX,YAAME,GAAG,GAAG,gDAAZ;AAEA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CACFG,IADE,CACGC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADV,EAEFC,KAFE,CAEI,MAAM,IAFV,CAAvB;AAIA,YAAMC,QAAQ,GAAGN,QAAQ,CAACO,KAA1B;AAEAb,MAAAA,QAAQ,CAACN,YAAY,CAAC;AAClBS,QAAAA,UAAU,EAAE,IADM;AAElBW,QAAAA,GAAG,EAAE,MAFa;AAGlBF,QAAAA,QAAQ,EAAEA;AAHQ,OAAD,CAAb,CAAR;AAKAZ,MAAAA,QAAQ,CAACL,IAAI,CAAC,GAAD,CAAL,CAAR;AACH;AACJ,GApBD;AAqBH,CAtBM;AAwBP,OAAO,MAAMoB,MAAM,GAAG,CAACH,QAAD,EAAWI,KAAX,EAAkBC,QAAlB,EAA4BC,eAA5B,KAAgD;AAClE,SAAO,MAAOlB,QAAP,IAAoB;AACvB,QAAGY,QAAQ,KAAK,EAAb,IAAmBI,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAhD,IAAsDC,eAAe,KAAK,EAA7E,EAAgF;AAC5EC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,QAAGF,QAAQ,KAAKC,eAAhB,EAAgC;AAC5BC,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,WAAOvB,IAAI,CAACwB,8BAAL,CAAoCJ,KAApC,EAA2CC,QAA3C,EACFT,IADE,CACGa,MAAM,IAAI;AACZ,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMR,GAAG,GAAGQ,IAAI,CAACR,GAAjB;AACA,cAAMS,SAAS,GAAG1B,iBAAiB,CAAC2B,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACpBC,UAAAA,SAAS,EAAEH,SADS;AAEpBP,UAAAA,KAAK,EAAEA,KAFa;AAGpBW,UAAAA,IAAI,EAAE,UAHc;AAIpBb,UAAAA,GAAG,EAAEA,GAJe;AAKpBc,UAAAA,UAAU,EAAEL,SALQ;AAMpBX,UAAAA,QAAQ,EAAEA;AANU,SAAxB;AASAd,QAAAA,EAAE,CAAC+B,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BhB,GAA3B,EAAgCiB,GAAhC,CAAoCN,eAApC,EACKjB,IADL,CACU,MAAM;AACRR,UAAAA,QAAQ,CAACL,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,SAHL;AAIH;AACJ,KAtBE,CAAP;AAuBH,GAlCD;AAmCH,CApCM","sourcesContent":["import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index'; \n\n\nexport const signIn = () => {\n    return async(dispatch, getState) => {\n        const state = getState();\n        const isSignedIn = state.users.isSignedIn;\n\n        if(!isSignedIn){\n            const url = 'https://api.github.com/users/Yamazaki-Koji0619';\n\n            const response = await fetch(url)\n                                .then(res => res.json())\n                                .catch(() => null)\n\n            const username = response.login\n\n            dispatch(signInAction({\n                isSignedIn: true,\n                uid: \"0001\",\n                username: username\n            }))\n            dispatch(push('/'))\n        }\n    }\n}\n\nexport const SignUp = (username, email, password, confirmpassword) => {\n    return async (dispatch) => {\n        if(username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        if(password !== confirmpassword){\n            alert(\"パスワードが一致しません。もう一度お試しください。\")\n            return false\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        create_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        uid: uid,\n                        updated_at: timestamp,\n                        username: username\n                    }\n\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}