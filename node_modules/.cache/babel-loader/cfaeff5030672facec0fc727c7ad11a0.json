{"ast":null,"code":"import { db, FirebaseTimestamp } from \"../../firebase\";\nimport { push } from \"connected-react-router\";\nimport { deleteProductAction, fetchProductsAction } from './actions';\nconst productsRef = db.collection('products');\nexport const deleteProduct = id => {\n  return async (dispatch, getState) => {\n    productsRef.doc(id).delete().then(() => {\n      const prevProducts = getState().products.list;\n      const nextProducts = prevProducts.filter(product => product.id !== id);\n      dispatch(deleteProductAction)(nextProducts);\n    });\n  };\n};\nexport const fetchProducts = () => {\n  return async dispatch => {\n    productsRef.orderBy('updated_at', 'desc').get().then(snapshots => {\n      const productList = [];\n      snapshots.forEach(snapshot => {\n        const product = snapshot.data();\n        productList.push(product);\n      });\n      dispatch(fetchProductsAction(productList));\n    });\n  };\n};\nexport const saveProduct = (id, name, discription, category, gender, price, images, sizes) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      category: category,\n      discription: discription,\n      gender: gender,\n      images: images,\n      name: name,\n      price: parseInt(price, 10),\n      sizes: sizes,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = productsRef.doc();\n      id = ref.id;\n      data.id = id;\n      data.created_at = timestamp;\n    }\n\n    return productsRef.doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/products/operations.js"],"names":["db","FirebaseTimestamp","push","deleteProductAction","fetchProductsAction","productsRef","collection","deleteProduct","id","dispatch","getState","doc","delete","then","prevProducts","products","list","nextProducts","filter","product","fetchProducts","orderBy","get","snapshots","productList","forEach","snapshot","data","saveProduct","name","discription","category","gender","price","images","sizes","timestamp","now","parseInt","updated_at","ref","created_at","set","merge","catch","error","Error"],"mappings":"AAAA,SAASA,EAAT,EAAaC,iBAAb,QAAsC,gBAAtC;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,WAAzD;AAEA,MAAMC,WAAW,GAAGL,EAAE,CAACM,UAAH,CAAc,UAAd,CAApB;AAEA,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ;AACjC,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAChCL,IAAAA,WAAW,CAACM,GAAZ,CAAgBH,EAAhB,EAAoBI,MAApB,GACKC,IADL,CACU,MAAM;AACR,YAAMC,YAAY,GAAGJ,QAAQ,GAAGK,QAAX,CAAoBC,IAAzC;AACA,YAAMC,YAAY,GAAGH,YAAY,CAACI,MAAb,CAAoBC,OAAO,IAAIA,OAAO,CAACX,EAAR,KAAeA,EAA9C,CAArB;AACAC,MAAAA,QAAQ,CAACN,mBAAD,CAAR,CAA8Bc,YAA9B;AACH,KALL;AAMH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMG,aAAa,GAAG,MAAM;AAC/B,SAAO,MAAMX,QAAN,IAAmB;AACtBJ,IAAAA,WAAW,CAACgB,OAAZ,CAAoB,YAApB,EAAiC,MAAjC,EAAyCC,GAAzC,GACKT,IADL,CACUU,SAAS,IAAI;AACf,YAAMC,WAAW,GAAG,EAApB;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAQ,IAAI;AAC1B,cAAMP,OAAO,GAAGO,QAAQ,CAACC,IAAT,EAAhB;AACAH,QAAAA,WAAW,CAACtB,IAAZ,CAAiBiB,OAAjB;AACH,OAHD;AAIAV,MAAAA,QAAQ,CAACL,mBAAmB,CAACoB,WAAD,CAApB,CAAR;AACH,KARL;AASH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMI,WAAW,GAAG,CAACpB,EAAD,EAAKqB,IAAL,EAAWC,WAAX,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,MAAjD,EAAyDC,KAAzD,KAAmE;AAC1F,SAAO,MAAM1B,QAAN,IAAmB;AACtB,UAAM2B,SAAS,GAAGnC,iBAAiB,CAACoC,GAAlB,EAAlB;AAEA,UAAMV,IAAI,GAAG;AACTI,MAAAA,QAAQ,EAAEA,QADD;AAETD,MAAAA,WAAW,EAAEA,WAFJ;AAGTE,MAAAA,MAAM,EAAEA,MAHC;AAITE,MAAAA,MAAM,EAAEA,MAJC;AAKTL,MAAAA,IAAI,EAAEA,IALG;AAMTI,MAAAA,KAAK,EAAEK,QAAQ,CAACL,KAAD,EAAQ,EAAR,CANN;AAOTE,MAAAA,KAAK,EAAEA,KAPE;AAQTI,MAAAA,UAAU,EAAEH;AARH,KAAb;;AAWA,QAAG5B,EAAE,KAAK,EAAV,EAAa;AACT,YAAMgC,GAAG,GAAGnC,WAAW,CAACM,GAAZ,EAAZ;AACAH,MAAAA,EAAE,GAAGgC,GAAG,CAAChC,EAAT;AACAmB,MAAAA,IAAI,CAACnB,EAAL,GAAUA,EAAV;AACAmB,MAAAA,IAAI,CAACc,UAAL,GAAkBL,SAAlB;AACH;;AAED,WAAO/B,WAAW,CAACM,GAAZ,CAAgBH,EAAhB,EAAoBkC,GAApB,CAAwBf,IAAxB,EAA8B;AAACgB,MAAAA,KAAK,EAAE;AAAR,KAA9B,EACF9B,IADE,CACG,MAAM;AACRJ,MAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,KAHE,EAGA0C,KAHA,CAGOC,KAAD,IAAW;AAChB,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH,KALE,CAAP;AAMH,GA3BD;AA4BH,CA7BM","sourcesContent":["import { db, FirebaseTimestamp } from \"../../firebase\";\nimport { push } from \"connected-react-router\";\nimport { deleteProductAction, fetchProductsAction } from './actions';\n\nconst productsRef = db.collection('products');\n\nexport const deleteProduct = (id) => {\n    return async(dispatch, getState) => {\n        productsRef.doc(id).delete()\n            .then(() => {\n                const prevProducts = getState().products.list;\n                const nextProducts = prevProducts.filter(product => product.id !== id)\n                dispatch(deleteProductAction)(nextProducts)\n            })\n    }\n}\n\nexport const fetchProducts = () => {\n    return async(dispatch) => {\n        productsRef.orderBy('updated_at','desc').get()\n            .then(snapshots => {\n                const productList = []\n                snapshots.forEach(snapshot => {\n                    const product = snapshot.data();\n                    productList.push(product)\n                })\n                dispatch(fetchProductsAction(productList))\n            })\n    }\n}\n\nexport const saveProduct = (id, name, discription, category, gender, price, images, sizes) => {\n    return async(dispatch) => {\n        const timestamp = FirebaseTimestamp.now()\n\n        const data = {\n            category: category,\n            discription: discription,\n            gender: gender,\n            images: images,\n            name: name,\n            price: parseInt(price, 10),\n            sizes: sizes,\n            updated_at: timestamp\n        }\n\n        if(id === \"\"){\n            const ref = productsRef.doc()\n            id = ref.id\n            data.id = id\n            data.created_at = timestamp\n        }\n\n        return productsRef.doc(id).set(data, {merge: true})\n            .then(() => {\n                dispatch(push('/'))\n            }).catch((error) => {\n                throw new Error(error)\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}