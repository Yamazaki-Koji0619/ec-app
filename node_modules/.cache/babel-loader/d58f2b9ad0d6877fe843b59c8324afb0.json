{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        db.collection('user').doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};\nexport const signUp = (username, email, password, confirmpassword) => {\n  return async dispatch => {\n    if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmpassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          create_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection('users').doc(uid).set(userInitialData).then(() => {\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/users/operations.js"],"names":["signInAction","push","auth","db","FirebaseTimestamp","signIn","email","password","dispatch","alert","signInWithEmailAndPassword","then","result","user","uid","collection","doc","get","snapshot","data","isSignedIn","role","username","signUp","confirmpassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","create_at","updated_at","set"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,IAAT,EAAeC,EAAf,EAAmBC,iBAAnB,QAA4C,sBAA5C;AAGA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACvC,SAAO,MAAMC,QAAN,IAAmB;AACtB,QAAGF,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAAhC,EAAmC;AAC/BE,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAEDP,IAAAA,IAAI,CAACQ,0BAAL,CAAgCJ,KAAhC,EAAuCC,QAAvC,EACKI,IADL,CACUC,MAAM,IAAI;AACZ,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AAEAX,QAAAA,EAAE,CAACY,UAAH,CAAc,MAAd,EAAsBC,GAAtB,CAA0BF,GAA1B,EAA+BG,GAA/B,GACKN,IADL,CACUO,QAAQ,IAAI;AACd,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb;AACAX,UAAAA,QAAQ,CAACR,YAAY,CAAC;AAClBoB,YAAAA,UAAU,EAAE,IADM;AAElBC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAFO;AAGlBP,YAAAA,GAAG,EAAEA,GAHa;AAIlBQ,YAAAA,QAAQ,EAAEH,IAAI,CAACG;AAJG,WAAD,CAAb,CAAR;AAOAd,UAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,SAXL;AAYH;AACJ,KApBL;AAqBH,GA3BD;AA4BH,CA7BM;AA+BP,OAAO,MAAMsB,MAAM,GAAG,CAACD,QAAD,EAAWhB,KAAX,EAAkBC,QAAlB,EAA4BiB,eAA5B,KAAgD;AAClE,SAAO,MAAOhB,QAAP,IAAoB;AACvB,QAAGc,QAAQ,KAAK,EAAb,IAAmBhB,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAhD,IAAsDiB,eAAe,KAAK,EAA7E,EAAgF;AAC5Ef,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,QAAGF,QAAQ,KAAKiB,eAAhB,EAAgC;AAC5Bf,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,WAAOP,IAAI,CAACuB,8BAAL,CAAoCnB,KAApC,EAA2CC,QAA3C,EACFI,IADE,CACGC,MAAM,IAAI;AACZ,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AACA,cAAMY,SAAS,GAAGtB,iBAAiB,CAACuB,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACpBC,UAAAA,SAAS,EAAEH,SADS;AAEpBpB,UAAAA,KAAK,EAAEA,KAFa;AAGpBe,UAAAA,IAAI,EAAE,UAHc;AAIpBP,UAAAA,GAAG,EAAEA,GAJe;AAKpBgB,UAAAA,UAAU,EAAEJ,SALQ;AAMpBJ,UAAAA,QAAQ,EAAEA;AANU,SAAxB;AASAnB,QAAAA,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,GAA3B,EAAgCiB,GAAhC,CAAoCH,eAApC,EACKjB,IADL,CACU,MAAM;AACRH,UAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,SAHL;AAIH;AACJ,KAtBE,CAAP;AAuBH,GAlCD;AAmCH,CApCM","sourcesContent":["import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\n\n\nexport const signIn = (email, password) => {\n    return async(dispatch) => {\n        if(email === \"\" || password === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n        \n        auth.signInWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    \n                    db.collection('user').doc(uid).get()\n                        .then(snapshot => {\n                            const data = snapshot.data()\n                            dispatch(signInAction({\n                                isSignedIn: true,\n                                role: data.role,\n                                uid: uid,\n                                username: data.username\n                            }))\n\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}\n\nexport const signUp = (username, email, password, confirmpassword) => {\n    return async (dispatch) => {\n        if(username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        if(password !== confirmpassword){\n            alert(\"パスワードが一致しません。もう一度お試しください。\")\n            return false\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        create_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        uid: uid,\n                        updated_at: timestamp,\n                        username: username\n                    }\n\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}