{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uiddb.collection('user').doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n        });\n      }\n    });\n  };\n};\nexport const signUp = (username, email, password, confirmpassword) => {\n  return async dispatch => {\n    if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmpassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          create_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection('users').doc(uid).set(userInitialData).then(() => {\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/users/operations.js"],"names":["signInAction","push","auth","db","FirebaseTimestamp","signIn","email","password","dispatch","username","confirmpassword","alert","signInWithEmailAndPassword","then","result","user","uid","uiddb","collection","doc","get","snapshot","data","signUp","createUserWithEmailAndPassword","timestamp","now","userInitialData","create_at","role","updated_at","set"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,IAAT,EAAeC,EAAf,EAAmBC,iBAAnB,QAA4C,sBAA5C;AAGA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACvC,SAAO,MAAMC,QAAN,IAAmB;AACtB,QAAGC,QAAQ,KAAK,EAAb,IAAmBH,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAhD,IAAsDG,eAAe,KAAK,EAA7E,EAAgF;AAC5EC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAEDT,IAAAA,IAAI,CAACU,0BAAL,CAAgCN,KAAhC,EAAuCC,QAAvC,EACKM,IADL,CACUC,MAAM,IAAI;AACZ,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACE,KAAL,CAAWC,UAAX,CAAsB,MAAtB,EAA8BC,GAA9B,CAAkCH,GAAlC,EAAuCI,GAAvC,GACPP,IADO,CACFQ,QAAQ,IAAI;AACd,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb;AAEH,SAJO,CAAZ;AAKH;AACJ,KAXL;AAYH,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAMC,MAAM,GAAG,CAACd,QAAD,EAAWH,KAAX,EAAkBC,QAAlB,EAA4BG,eAA5B,KAAgD;AAClE,SAAO,MAAOF,QAAP,IAAoB;AACvB,QAAGC,QAAQ,KAAK,EAAb,IAAmBH,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAhD,IAAsDG,eAAe,KAAK,EAA7E,EAAgF;AAC5EC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,QAAGJ,QAAQ,KAAKG,eAAhB,EAAgC;AAC5BC,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,WAAOT,IAAI,CAACsB,8BAAL,CAAoClB,KAApC,EAA2CC,QAA3C,EACFM,IADE,CACGC,MAAM,IAAI;AACZ,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AACA,cAAMS,SAAS,GAAGrB,iBAAiB,CAACsB,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACpBC,UAAAA,SAAS,EAAEH,SADS;AAEpBnB,UAAAA,KAAK,EAAEA,KAFa;AAGpBuB,UAAAA,IAAI,EAAE,UAHc;AAIpBb,UAAAA,GAAG,EAAEA,GAJe;AAKpBc,UAAAA,UAAU,EAAEL,SALQ;AAMpBhB,UAAAA,QAAQ,EAAEA;AANU,SAAxB;AASAN,QAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BH,GAA3B,EAAgCe,GAAhC,CAAoCJ,eAApC,EACKd,IADL,CACU,MAAM;AACRL,UAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,SAHL;AAIH;AACJ,KAtBE,CAAP;AAuBH,GAlCD;AAmCH,CApCM","sourcesContent":["import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\n\n\nexport const signIn = (email, password) => {\n    return async(dispatch) => {\n        if(username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n        \n        auth.signInWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uiddb.collection('user').doc(uid).get()\n                        .then(snapshot => {\n                            const data = snapshot.data()\n                            \n                        })\n                }\n            })\n    }\n}\n\nexport const signUp = (username, email, password, confirmpassword) => {\n    return async (dispatch) => {\n        if(username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        if(password !== confirmpassword){\n            alert(\"パスワードが一致しません。もう一度お試しください。\")\n            return false\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        create_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        uid: uid,\n                        updated_at: timestamp,\n                        username: username\n                    }\n\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}