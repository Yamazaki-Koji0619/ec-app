{"ast":null,"code":"import { signInAction, signOutAction, fetchProductsInCartAction, fetchOrdersHistoryAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\nexport const addProductToCart = addedProduct => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n    const cartRef = db.collection('users').doc(uid).collection('cart').doc();\n    addedProduct['cartId'] = cartRef.id;\n    await cartRef.set(addedProduct);\n    dispatch(push('/'));\n  };\n};\nexport const addProductToLike = addedLike => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n    const likeRef = db.collection('users').doc(uid).collection('like').doc();\n    addedLike['likeId'] = likeRef.id;\n    await likeRef.set(addedLike);\n    dispatch(push('/'));\n  };\n};\nexport const fetchOrdersHistory = () => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n    const list = [];\n    db.collection('users').doc(uid).collection('orders').orderBy('updated_at', 'desc').get().then(snapshots => {\n      snapshots.forEach(snapshot => {\n        const data = snapshot.data();\n        list.push(data);\n      });\n      dispatch(fetchOrdersHistoryAction(list));\n    });\n  };\n};\nexport const fetchProductsInCart = products => {\n  return async dispatch => {\n    dispatch(fetchProductsInCartAction(products));\n  };\n};\nexport const listenAuthState = () => {\n  return async dispatch => {\n    return auth.onAuthStateChanged(user => {\n      if (user) {\n        const uid = user.uid;\n        db.collection('users').doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n        });\n      } else {\n        dispatch(push('/signin'));\n      }\n    });\n  };\n};\nexport const resetPassword = email => {\n  return async dispatch => {\n    if (email === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    } else {\n      auth.sendPasswordResetEmail(email).then(() => {\n        alert('入力されたアドレスにパスワードリセット用のメールを送信しました。');\n        dispatch(push('/signin'));\n      }).catch(() => {\n        alert('パスワードリセットに失敗しました。通信を確認してもう一度お試しください。');\n      });\n    }\n  };\n};\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        db.collection('users').doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};\nexport const signUp = (username, email, password, confirmpassword) => {\n  return async dispatch => {\n    if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmpassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          create_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection('users').doc(uid).set(userInitialData).then(() => {\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};\nexport const signOut = () => {\n  return async dispatch => {\n    auth.signOut().then(() => {\n      dispatch(signOutAction());\n      dispatch(push('/signin'));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/users/operations.js"],"names":["signInAction","signOutAction","fetchProductsInCartAction","fetchOrdersHistoryAction","push","auth","db","FirebaseTimestamp","addProductToCart","addedProduct","dispatch","getState","uid","users","cartRef","collection","doc","id","set","addProductToLike","addedLike","likeRef","fetchOrdersHistory","list","orderBy","get","then","snapshots","forEach","snapshot","data","fetchProductsInCart","products","listenAuthState","onAuthStateChanged","user","isSignedIn","role","username","resetPassword","email","alert","sendPasswordResetEmail","catch","signIn","password","signInWithEmailAndPassword","result","signUp","confirmpassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","create_at","updated_at","signOut"],"mappings":"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","sourcesContent":["import { signInAction, signOutAction, fetchProductsInCartAction, fetchOrdersHistoryAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\n\nexport const addProductToCart = (addedProduct) => {\n    return async(dispatch,getState) => {\n        const uid = getState().users.uid;\n        const cartRef = db.collection('users').doc(uid).collection('cart').doc();\n        addedProduct['cartId'] = cartRef.id;\n        await cartRef.set(addedProduct)\n        dispatch(push('/'))\n    }\n} \n\nexport const addProductToLike = (addedLike) => {\n    return async(dispatch,getState) => {\n        const uid = getState().users.uid;\n        const likeRef = db.collection('users').doc(uid).collection('like').doc();\n        addedLike['likeId'] = likeRef.id;\n        await likeRef.set(addedLike)\n        dispatch(push('/'))\n    }\n} \n\nexport const fetchOrdersHistory = () => {\n    return async(dispatch, getState) => {\n        const uid = getState().users.uid;\n        const list = [];\n\n        db.collection('users').doc(uid).collection('orders').orderBy('updated_at', 'desc').get()\n            .then((snapshots) => {\n                snapshots.forEach(snapshot => {\n                    const data = snapshot.data()\n                    list.push(data)\n                })\n\n                dispatch(fetchOrdersHistoryAction(list))\n            })\n    }\n}\n\nexport const fetchProductsInCart = (products) => {\n    return async(dispatch) => {\n        dispatch(fetchProductsInCartAction(products))\n    }\n}\n\nexport const listenAuthState = () => {\n    return async(dispatch) => {\n        return auth.onAuthStateChanged(user => {\n            if(user){\n                const uid = user.uid\n                    \n                db.collection('users').doc(uid).get()\n                    .then(snapshot => {\n                        const data = snapshot.data()\n\n                        dispatch(signInAction({\n                            isSignedIn: true,\n                            role: data.role,\n                            uid: uid,\n                            username: data.username\n                        }))\n                    })\n            }else{\n                dispatch(push('/signin'))\n            }\n        })\n    }\n}\n\nexport const resetPassword = (email) => {\n    return async(dispatch) => {\n        if(email === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }else{\n            auth.sendPasswordResetEmail(email)\n                .then(() => {\n                    alert('入力されたアドレスにパスワードリセット用のメールを送信しました。')\n                    dispatch(push('/signin'))\n                }).catch(() => {\n                    alert('パスワードリセットに失敗しました。通信を確認してもう一度お試しください。')\n                })\n        }\n    }\n}\n\n\nexport const signIn = (email, password) => {\n    return async(dispatch) => {\n        if(email === \"\" || password === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n        \n        auth.signInWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    \n                    db.collection('users').doc(uid).get()\n                        .then(snapshot => {\n                            const data = snapshot.data()\n\n                            dispatch(signInAction({\n                                isSignedIn: true,\n                                role: data.role,\n                                uid: uid,\n                                username: data.username\n                            }))\n\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}\n\nexport const signUp = (username, email, password, confirmpassword) => {\n    return async (dispatch) => {\n        if(username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        if(password !== confirmpassword){\n            alert(\"パスワードが一致しません。もう一度お試しください。\")\n            return false\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        create_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        uid: uid,\n                        updated_at: timestamp,\n                        username: username\n                    }\n\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}\n\nexport const signOut = () => {\n    return async(dispatch) => {\n        auth.signOut()\n            .then(() => {\n                dispatch(signOutAction())\n                dispatch(push('/signin'))\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}