{"ast":null,"code":"import { signInAction, signOutAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\nexport const listenAuthState = () => {\n  return async dispatch => {\n    return auth.onAuthStateChanged(user => {\n      if (user) {\n        const uid = user.uid;\n        db.collection('users').doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n        });\n      } else {\n        dispatch(push('/signin'));\n      }\n    });\n  };\n};\nexport const resetPassword = email => {\n  return async dispatch => {\n    if (email === \"\") {\n      lert(\"必須項目が未入力です\");\n      return false;\n    } else {\n      auth.sendPasswordResetEmail(email).then(() => {\n        alert('入力されたアドレスにパスワードリセット用のメールを送信しました。');\n        dispatch(push('/signin'));\n      }).catch(() => {\n        alert('パスワードリセットに失敗しました。通信を確認してもう一度お試しください。');\n      });\n    }\n  };\n};\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        db.collection('users').doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};\nexport const signUp = (username, email, password, confirmpassword) => {\n  return async dispatch => {\n    if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmpassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          create_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection('users').doc(uid).set(userInitialData).then(() => {\n          dispatch(push('/'));\n        });\n      }\n    });\n  };\n};\nexport const signOut = () => {\n  return async dispatch => {\n    auth.signOut().then(() => {\n      dispatch(signOutAction());\n      dispatch(push('/signin'));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/users/operations.js"],"names":["signInAction","signOutAction","push","auth","db","FirebaseTimestamp","listenAuthState","dispatch","onAuthStateChanged","user","uid","collection","doc","get","then","snapshot","data","isSignedIn","role","username","resetPassword","email","lert","sendPasswordResetEmail","alert","catch","signIn","password","signInWithEmailAndPassword","result","signUp","confirmpassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","create_at","updated_at","set","signOut"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,WAA5C;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,IAAT,EAAeC,EAAf,EAAmBC,iBAAnB,QAA4C,sBAA5C;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,SAAO,MAAMC,QAAN,IAAmB;AACtB,WAAOJ,IAAI,CAACK,kBAAL,CAAwBC,IAAI,IAAI;AACnC,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AAEAN,QAAAA,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,GAA3B,EAAgCG,GAAhC,GACKC,IADL,CACUC,QAAQ,IAAI;AACd,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb;AAEAT,UAAAA,QAAQ,CAACP,YAAY,CAAC;AAClBiB,YAAAA,UAAU,EAAE,IADM;AAElBC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAFO;AAGlBR,YAAAA,GAAG,EAAEA,GAHa;AAIlBS,YAAAA,QAAQ,EAAEH,IAAI,CAACG;AAJG,WAAD,CAAb,CAAR;AAMH,SAVL;AAWH,OAdD,MAcK;AACDZ,QAAAA,QAAQ,CAACL,IAAI,CAAC,SAAD,CAAL,CAAR;AACH;AACJ,KAlBM,CAAP;AAmBH,GApBD;AAqBH,CAtBM;AAwBP,OAAO,MAAMkB,aAAa,GAAIC,KAAD,IAAW;AACpC,SAAO,MAAMd,QAAN,IAAmB;AACtB,QAAGc,KAAK,KAAK,EAAb,EAAgB;AACZC,MAAAA,IAAI,CAAC,YAAD,CAAJ;AACA,aAAO,KAAP;AACH,KAHD,MAGK;AACDnB,MAAAA,IAAI,CAACoB,sBAAL,CAA4BF,KAA5B,EACKP,IADL,CACU,MAAM;AACRU,QAAAA,KAAK,CAAC,kCAAD,CAAL;AACAjB,QAAAA,QAAQ,CAACL,IAAI,CAAC,SAAD,CAAL,CAAR;AACH,OAJL,EAIOuB,KAJP,CAIa,MAAM;AACXD,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACH,OANL;AAOH;AACJ,GAbD;AAcH,CAfM;AAkBP,OAAO,MAAME,MAAM,GAAG,CAACL,KAAD,EAAQM,QAAR,KAAqB;AACvC,SAAO,MAAMpB,QAAN,IAAmB;AACtB,QAAGc,KAAK,KAAK,EAAV,IAAgBM,QAAQ,KAAK,EAAhC,EAAmC;AAC/BH,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAEDrB,IAAAA,IAAI,CAACyB,0BAAL,CAAgCP,KAAhC,EAAuCM,QAAvC,EACKb,IADL,CACUe,MAAM,IAAI;AACZ,YAAMpB,IAAI,GAAGoB,MAAM,CAACpB,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AAEAN,QAAAA,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,GAA3B,EAAgCG,GAAhC,GACKC,IADL,CACUC,QAAQ,IAAI;AACd,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb;AAEAT,UAAAA,QAAQ,CAACP,YAAY,CAAC;AAClBiB,YAAAA,UAAU,EAAE,IADM;AAElBC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAFO;AAGlBR,YAAAA,GAAG,EAAEA,GAHa;AAIlBS,YAAAA,QAAQ,EAAEH,IAAI,CAACG;AAJG,WAAD,CAAb,CAAR;AAOAZ,UAAAA,QAAQ,CAACL,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,SAZL;AAaH;AACJ,KArBL;AAsBH,GA5BD;AA6BH,CA9BM;AAgCP,OAAO,MAAM4B,MAAM,GAAG,CAACX,QAAD,EAAWE,KAAX,EAAkBM,QAAlB,EAA4BI,eAA5B,KAAgD;AAClE,SAAO,MAAOxB,QAAP,IAAoB;AACvB,QAAGY,QAAQ,KAAK,EAAb,IAAmBE,KAAK,KAAK,EAA7B,IAAmCM,QAAQ,KAAK,EAAhD,IAAsDI,eAAe,KAAK,EAA7E,EAAgF;AAC5EP,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,QAAGG,QAAQ,KAAKI,eAAhB,EAAgC;AAC5BP,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,WAAOrB,IAAI,CAAC6B,8BAAL,CAAoCX,KAApC,EAA2CM,QAA3C,EACFb,IADE,CACGe,MAAM,IAAI;AACZ,YAAMpB,IAAI,GAAGoB,MAAM,CAACpB,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACJ,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AACA,cAAMuB,SAAS,GAAG5B,iBAAiB,CAAC6B,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACpBC,UAAAA,SAAS,EAAEH,SADS;AAEpBZ,UAAAA,KAAK,EAAEA,KAFa;AAGpBH,UAAAA,IAAI,EAAE,UAHc;AAIpBR,UAAAA,GAAG,EAAEA,GAJe;AAKpB2B,UAAAA,UAAU,EAAEJ,SALQ;AAMpBd,UAAAA,QAAQ,EAAEA;AANU,SAAxB;AASAf,QAAAA,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,GAA3B,EAAgC4B,GAAhC,CAAoCH,eAApC,EACKrB,IADL,CACU,MAAM;AACRP,UAAAA,QAAQ,CAACL,IAAI,CAAC,GAAD,CAAL,CAAR;AACH,SAHL;AAIH;AACJ,KAtBE,CAAP;AAuBH,GAlCD;AAmCH,CApCM;AAsCP,OAAO,MAAMqC,OAAO,GAAG,MAAM;AACzB,SAAO,MAAMhC,QAAN,IAAmB;AACtBJ,IAAAA,IAAI,CAACoC,OAAL,GACKzB,IADL,CACU,MAAM;AACRP,MAAAA,QAAQ,CAACN,aAAa,EAAd,CAAR;AACAM,MAAAA,QAAQ,CAACL,IAAI,CAAC,SAAD,CAAL,CAAR;AACH,KAJL;AAKH,GAND;AAOH,CARM","sourcesContent":["import { signInAction, signOutAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, db, FirebaseTimestamp } from '../../firebase/index';\n\nexport const listenAuthState = () => {\n    return async(dispatch) => {\n        return auth.onAuthStateChanged(user => {\n            if(user){\n                const uid = user.uid\n                    \n                db.collection('users').doc(uid).get()\n                    .then(snapshot => {\n                        const data = snapshot.data()\n\n                        dispatch(signInAction({\n                            isSignedIn: true,\n                            role: data.role,\n                            uid: uid,\n                            username: data.username\n                        }))\n                    })\n            }else{\n                dispatch(push('/signin'))\n            }\n        })\n    }\n}\n\nexport const resetPassword = (email) => {\n    return async(dispatch) => {\n        if(email === \"\"){\n            lert(\"必須項目が未入力です\")\n            return false\n        }else{\n            auth.sendPasswordResetEmail(email)\n                .then(() => {\n                    alert('入力されたアドレスにパスワードリセット用のメールを送信しました。')\n                    dispatch(push('/signin'))\n                }).catch(() => {\n                    alert('パスワードリセットに失敗しました。通信を確認してもう一度お試しください。')\n                })\n        }\n    }\n}\n\n\nexport const signIn = (email, password) => {\n    return async(dispatch) => {\n        if(email === \"\" || password === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n        \n        auth.signInWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    \n                    db.collection('users').doc(uid).get()\n                        .then(snapshot => {\n                            const data = snapshot.data()\n\n                            dispatch(signInAction({\n                                isSignedIn: true,\n                                role: data.role,\n                                uid: uid,\n                                username: data.username\n                            }))\n\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}\n\nexport const signUp = (username, email, password, confirmpassword) => {\n    return async (dispatch) => {\n        if(username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\"){\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        if(password !== confirmpassword){\n            alert(\"パスワードが一致しません。もう一度お試しください。\")\n            return false\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if(user){\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        create_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        uid: uid,\n                        updated_at: timestamp,\n                        username: username\n                    }\n\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push('/'))\n                        })\n                }\n            })\n    }\n}\n\nexport const signOut = () => {\n    return async(dispatch) => {\n        auth.signOut()\n            .then(() => {\n                dispatch(signOutAction())\n                dispatch(push('/signin'))\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}