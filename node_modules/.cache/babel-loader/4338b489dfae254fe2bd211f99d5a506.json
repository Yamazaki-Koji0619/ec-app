{"ast":null,"code":"import { db, FirebaseTimestamp } from \"../../firebase\";\nimport { push } from \"connected-react-router\";\nimport { deleteProductAction, fetchProductsAction } from './actions';\nconst productsRef = db.collection('products');\nexport const deleteProduct = id => {\n  return async (dispatch, getState) => {\n    productsRef.doc(id).delete().then(() => {\n      const prevProducts = getState().products.list;\n      const nextProducts = prevProducts.filter(product => product.id !== id);\n      dispatch(deleteProductAction(nextProducts));\n    });\n  };\n};\nexport const fetchProducts = () => {\n  return async dispatch => {\n    productsRef.orderBy('updated_at', 'desc').get().then(snapshots => {\n      const productList = [];\n      snapshots.forEach(snapshot => {\n        const product = snapshot.data();\n        productList.push(product);\n      });\n      dispatch(fetchProductsAction(productList));\n    });\n  };\n};\nexport const OrderProduct = (ProductInCart, amount) => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n    const userRef = db.collection('users').dic('uid');\n    const timestamp = FirebaseTimestamp.now();\n    let products = {},\n        soldOutProducts = [];\n    const batch = db.batch();\n\n    for (const product of ProductInCart) {\n      const snapshot = await productsRef.doc(product.productId).get();\n      const sizes = snapshot.data().sizes;\n      const updataedSizes = sizes.map(size => {\n        if (size.size === product.size) {\n          if (size.quantity === 0) {\n            soldOutProducts.push(product.name);\n            return size;\n          }\n\n          return {\n            size: size.size,\n            quantity: size.quantity - 1\n          };\n        } else {\n          return size;\n        }\n      });\n      products[product.productId] = {\n        id: product.productId,\n        images: product.images,\n        name: product.name,\n        price: product.price,\n        size: product.size\n      };\n      batch.update(productsRef.doc(productId), {\n        sizes: updataedSizes\n      });\n      batch.delete(userRef.collection('cart').dic(product.cartId));\n    }\n\n    if (soldOutProducts.length > 0) {\n      const errorMessage = soldOutProducts.length > 1 ? soldOutProducts.join('と') : soldOutProducts[0];\n      alert('大変申し訳ありません。' + errorMessage + 'が在庫切れとなったため、注文処理を中断しました。');\n      return false;\n    } else {\n      batch.commit().then(() => {\n        const orderRef = userRef.collection('orders').doc();\n        const data = timestamp.toData();\n        const shippingData = FirebaseTimestamp.fromDate(new Date(data.setDate(data.getDate() + 3)));\n        const history = {\n          amount: amount,\n          created_at: timestamp,\n          id: orderRef.id,\n          product: products,\n          shipping_data: shippingData,\n          updated_at: timestamp\n        };\n        orderRef.set(history);\n        dispatch(push('/order/complete'));\n      }).catch(() => {\n        alert('注文処理に失敗しました。通信環境をご確認のうえ、もう一度お試しください。');\n        return false;\n      });\n    }\n  };\n};\nexport const saveProduct = (id, name, discription, category, gender, price, images, sizes) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      category: category,\n      discription: discription,\n      gender: gender,\n      images: images,\n      name: name,\n      price: parseInt(price, 10),\n      sizes: sizes,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = productsRef.doc();\n      id = ref.id;\n      data.id = id;\n      data.created_at = timestamp;\n    }\n\n    return productsRef.doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yamazakikouji/Desktop/ec-app/src/redux/products/operations.js"],"names":["db","FirebaseTimestamp","push","deleteProductAction","fetchProductsAction","productsRef","collection","deleteProduct","id","dispatch","getState","doc","delete","then","prevProducts","products","list","nextProducts","filter","product","fetchProducts","orderBy","get","snapshots","productList","forEach","snapshot","data","OrderProduct","ProductInCart","amount","uid","users","userRef","dic","timestamp","now","soldOutProducts","batch","productId","sizes","updataedSizes","map","size","quantity","name","images","price","update","cartId","length","errorMessage","join","alert","commit","orderRef","toData","shippingData","fromDate","Date","setDate","getDate","history","created_at","shipping_data","updated_at","set","catch","saveProduct","discription","category","gender","parseInt","ref","merge","error","Error"],"mappings":"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","sourcesContent":["import { db, FirebaseTimestamp } from \"../../firebase\";\nimport { push } from \"connected-react-router\";\nimport { deleteProductAction, fetchProductsAction } from './actions';\n\nconst productsRef = db.collection('products');\n\nexport const deleteProduct = (id) => {\n    return async(dispatch, getState) => {\n        productsRef.doc(id).delete()\n            .then(() => {\n                const prevProducts = getState().products.list;\n                const nextProducts = prevProducts.filter(product => product.id !== id)\n                dispatch(deleteProductAction(nextProducts))\n            })\n    }\n}\n\nexport const fetchProducts = () => {\n    return async(dispatch) => {\n        productsRef.orderBy('updated_at','desc').get()\n            .then(snapshots => {\n                const productList = []\n                snapshots.forEach(snapshot => {\n                    const product = snapshot.data();\n                    productList.push(product)\n                })\n                dispatch(fetchProductsAction(productList))\n            })\n    }\n}\n\nexport const OrderProduct = (ProductInCart, amount) => {\n    return async(dispatch, getState) => {\n        const uid = getState().users.uid;\n        const userRef = db.collection('users').dic('uid');\n        const timestamp = FirebaseTimestamp.now();\n\n        let products = {},\n            soldOutProducts = [];\n\n        const batch = db.batch()\n\n        for(const product of ProductInCart){\n            const snapshot = await productsRef.doc(product.productId).get()\n            const sizes = snapshot.data().sizes\n\n            const updataedSizes = sizes.map(size => {\n                if(size.size === product.size){\n                    if(size.quantity === 0){\n                        soldOutProducts.push(product.name)\n                        return size\n                    }\n                    return{\n                        size: size.size,\n                        quantity: size.quantity - 1\n                    }\n                } else{\n                    return size\n                }\n            })\n\n            products[product.productId] = {\n                id: product.productId,\n                images: product.images,\n                name: product.name,\n                price: product.price,\n                size: product.size\n            }\n\n            batch.update(\n                productsRef.doc(productId),\n                {sizes: updataedSizes}\n            )\n\n            batch.delete(\n                userRef.collection('cart').dic(product.cartId)\n            )\n        }\n\n        if(soldOutProducts.length > 0){\n            const errorMessage = (soldOutProducts.length > 1) ? soldOutProducts.join('と') : soldOutProducts[0]\n            alert('大変申し訳ありません。'　+ errorMessage + 'が在庫切れとなったため、注文処理を中断しました。')\n            return false\n        }else{\n            batch.commit().then(() => {\n                const orderRef = userRef.collection('orders').doc();\n                const data = timestamp.toData();\n                const shippingData = FirebaseTimestamp.fromDate(new Date(data.setDate(data.getDate() + 3)));\n\n                const history = {\n                    amount: amount,\n                    created_at: timestamp,\n                    id: orderRef.id,\n                    product: products,\n                    shipping_data: shippingData,\n                    updated_at: timestamp\n                }\n                orderRef.set(history)\n\n                dispatch(push('/order/complete'))\n\n            }).catch(() => {\n                alert('注文処理に失敗しました。通信環境をご確認のうえ、もう一度お試しください。')\n                return false\n            })\n        }\n    }\n}\n\nexport const saveProduct = (id, name, discription, category, gender, price, images, sizes) => {\n    return async(dispatch) => {\n        const timestamp = FirebaseTimestamp.now()\n\n        const data = {\n            category: category,\n            discription: discription,\n            gender: gender,\n            images: images,\n            name: name,\n            price: parseInt(price, 10),\n            sizes: sizes,\n            updated_at: timestamp\n        }\n\n        if(id === \"\"){\n            const ref = productsRef.doc()\n            id = ref.id\n            data.id = id\n            data.created_at = timestamp\n        }\n\n        return productsRef.doc(id).set(data, {merge: true})\n            .then(() => {\n                dispatch(push('/'))\n            }).catch((error) => {\n                throw new Error(error)\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}